"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),function(app){app.registerModule("clientmanagements")}(ApplicationConfiguration),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),function(app){app.registerModule("inventorymanagements")}(ApplicationConfiguration),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),function(){function routeConfig($stateProvider){$stateProvider.state("clientmanagements",{"abstract":!0,url:"/clientmanagements",template:"<ui-view/>",data:{roles:["admin"]}}).state("clientmanagements.list",{url:"/list",templateUrl:"modules/clientmanagements/client/views/list-clientmanagements.client.view.html",controller:"ClientmanagementsListController",controllerAs:"vm",data:{pageTitle:"Clientmanagements List"}}).state("clientmanagements.create",{url:"/create",templateUrl:"modules/clientmanagements/client/views/create-clientmanagement.client.view.html",controller:"ClientmanagementsController",controllerAs:"vm",resolve:{clientmanagementResolve:newClientmanagement},data:{pageTitle:"Clientmanagements Create"}}).state("clientmanagements.edit",{url:"/:clientmanagementId/edit",templateUrl:"modules/clientmanagements/client/views/edit-clientmanagement.client.view.html",controller:"ClientmanagementsController",controllerAs:"vm",resolve:{clientmanagementResolve:getClientmanagement},data:{pageTitle:"Edit Clientmanagement {{ clientmanagementResolve.name }}"}}).state("clientmanagements.view",{url:"/:clientmanagementId",templateUrl:"modules/clientmanagements/client/views/view-clientmanagement.client.view.html",controller:"ClientmanagementsController",controllerAs:"vm",resolve:{clientmanagementResolve:getClientmanagement},data:{pageTitle:"Clientmanagement {{ clientmanagementResolve.name }}"}}).state("moveinventory",{url:"/moveitems",templateUrl:"modules/clientmanagements/client/views/move-inv.client.view.html",controller:"ClientInventorymanagementsListController",controllerAs:"vm",data:{roles:["user","admin"]}})}function getClientmanagement($stateParams,ClientmanagementsService){return ClientmanagementsService.get({clientmanagementId:$stateParams.clientmanagementId}).$promise}function newClientmanagement(ClientmanagementsService){return new ClientmanagementsService}angular.module("clientmanagements").config(routeConfig),routeConfig.$inject=["$stateProvider"],getClientmanagement.$inject=["$stateParams","ClientmanagementsService"],newClientmanagement.$inject=["ClientmanagementsService"]}(),function(){function ClientInventorymanagementsListController(ClientmanagementsService,InventorymanagementsService,$scope,$state,Authentication){function toasty(){var x=document.getElementById("snackbar");x.className="show",setTimeout(function(){x.className=x.className.replace("show","")},3e3)}var vm=this;vm.clientmanagements=ClientmanagementsService.query(),vm.inventorymanagements=InventorymanagementsService.query(),$scope.$state=$state,$scope.authentication=Authentication,$scope.cancelButton=function(){"admin"===Authentication.user.roles[0]?$state.go("mainmenuadmin"):$state.go("mainmenu")},$scope.moveToClient=function(){function successCallback(res){}function errorCallback(res){vm.error=res.data.message}if($scope.serial||$scope.nameAndEmail)if($scope.serial)if($scope.nameAndEmail){for(var invResult=-1,i=0;i<vm.inventorymanagements.length;i++)if(vm.inventorymanagements[i].upc===$scope.serial.upc){invResult=i;break}if(0===vm.inventorymanagements[invResult].qty)return void alert("This item is out of stock");var clientInfo=$scope.nameAndEmail.split(" --- "),clientResult=-1;for(i=0;i<vm.clientmanagements.length;i++)if(vm.clientmanagements[i].name===clientInfo[0]&&vm.clientmanagements[i].email===clientInfo[1]){clientResult=i;break}if(-1===invResult&&-1===clientResult)alert("That Client and UPC don't exist");else if(-1===invResult)alert("That UPC doesn't exist");else if(-1===clientResult)alert("That Client doesn't exist");else{var alreadyHas=!1;for(i=0;i<vm.clientmanagements[clientResult].inventory.length;i++)if(vm.clientmanagements[clientResult].inventory[i].upc===vm.inventorymanagements[invResult].upc){vm.clientmanagements[clientResult].inventory[i].qty+=1,alreadyHas=!0;break}alreadyHas||vm.clientmanagements[clientResult].inventory.push({tags:vm.inventorymanagements[invResult].tags,upc:vm.inventorymanagements[invResult].upc,qty:1}),vm.inventorymanagements[invResult].qty-=1,vm.clientmanagements[clientResult].$update(successCallback,errorCallback),vm.inventorymanagements[invResult].$update(successCallback,errorCallback),toasty(),$scope.serial=null}}else alert("You must fill in a Client first");else alert("You must fill in a UPC first");else alert("You must fill in a Client and UPC first")},$scope.moveToInventory=function(){function successCallback(res){}function errorCallback(res){vm.error=res.data.message}if($scope.serial||$scope.nameAndEmail)if($scope.serial)if($scope.nameAndEmail){for(var clientInfo=$scope.nameAndEmail.split(" --- "),clientResult=-1,i=0;i<vm.clientmanagements.length;i++)if(vm.clientmanagements[i].name===clientInfo[0]&&vm.clientmanagements[i].email===clientInfo[1]){clientResult=i;break}var invResult=-1;for(i=0;i<vm.inventorymanagements.length;i++)if(vm.inventorymanagements[i].upc===$scope.serial.upc){invResult=i;break}if(-1===invResult&&-1===clientResult)alert("That Client and UPC don't exist");else if(-1===invResult)alert("That UPC doesn't exist");else if(-1===clientResult)alert("That Client doesn't exist");else{var alreadyHas=!1;for(i=0;i<vm.clientmanagements[clientResult].inventory.length;i++)if(vm.clientmanagements[clientResult].inventory[i].upc===vm.inventorymanagements[invResult].upc){vm.clientmanagements[clientResult].inventory[i].qty-=1,0===vm.clientmanagements[clientResult].inventory[i].qty&&vm.clientmanagements[clientResult].inventory.splice(i,1),alreadyHas=!0;break}if(!alreadyHas)return void alert("Client doesn't have this item");vm.inventorymanagements[invResult].qty+=1,vm.clientmanagements[clientResult].$update(successCallback,errorCallback),vm.inventorymanagements[invResult].$update(successCallback,errorCallback),toasty(),$scope.serial=null}}else alert("You must fill in a Client first");else alert("You must fill in a UPC first");else alert("You must fill in a Client and UPC first")}}angular.module("clientmanagements").controller("ClientInventorymanagementsListController",ClientInventorymanagementsListController),angular.module("inventorymanagements").controller("ClientInventorymanagementsListController",ClientInventorymanagementsListController).filter("emptyifblank",function(){return function(object,query){return query?object:{}}}),ClientInventorymanagementsListController.$inject=["ClientmanagementsService","InventorymanagementsService","$scope","$state","Authentication"]}(),function(){function ClientmanagementsController($scope,$state,$window,Authentication,clientmanagement){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.clientmanagement.$remove().then(function(){$state.go("clientmanagements.list")})}function save(isValid){function successCallback(res){$state.go("clientmanagements.view",{clientmanagementId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.clientmanagement._id?vm.clientmanagement.$update(successCallback,errorCallback):vm.clientmanagement.$save(successCallback,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.clientmanagementForm"),!1)}function displayClientRoles(){var list="";return vm.clientmanagement.clientrolesFoster&&(list+="Foster, "),vm.clientmanagement.clientrolesStaff&&(list+="Staff, "),vm.clientmanagement.clientrolesSponsor&&(list+="Sponsor, "),vm.clientmanagement.clientrolesVeteran&&(list+="Veteran, "),vm.clientmanagement.clientrolesVolunteer&&(list+="Volunteer, "),list.slice(0,list.length-2)}function changeStatus(){$window.confirm("Are you sure you want to change this item's activity?")&&(vm.clientmanagement.inactive=!vm.clientmanagement.inactive,vm.clientmanagement.$update(vm.clientmanagement).then(function(){$state.go("clientmanagements.view")}))}function labelDisp(){return vm.clientmanagement.inactive?"label label-warning":""}function labelText(){return vm.clientmanagement.inactive?"Inactive":""}function buttonColor(){return vm.clientmanagement.inactive?"btn btn-success":"btn btn-warning"}function buttonText(){return vm.clientmanagement.inactive?"Activate":"Deactivate"}function branchText(){var branch="";return vm.clientmanagement.airForce&&(branch+="Air Force, "),vm.clientmanagement.army&&(branch+="Army, "),vm.clientmanagement.coastGuard&&(branch+="Coast Guard, "),vm.clientmanagement.marines&&(branch+="Marines, "),vm.clientmanagement.nationalGuard&&(branch+="National Guard, "),vm.clientmanagement.navy&&(branch+="Navy, "),branch&&(branch=branch.substring(0,branch.length-2)),branch}var vm=this;vm.authentication=Authentication,vm.clientmanagement=clientmanagement,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,vm.changeStatus=changeStatus,vm.labelDisp=labelDisp,vm.labelText=labelText,vm.buttonColor=buttonColor,vm.buttonText=buttonText,vm.branchText=branchText,vm.displayClientRoles=displayClientRoles}angular.module("clientmanagements").controller("ClientmanagementsController",ClientmanagementsController),ClientmanagementsController.$inject=["$scope","$state","$window","Authentication","clientmanagementResolve"]}(),function(){function ClientmanagementsListController(ClientmanagementsService){var vm=this;vm.clientmanagements=ClientmanagementsService.query(),vm.headSort="tags",vm.showNoInactive=function(item){return item.inactive===!1}}angular.module("clientmanagements").controller("ClientmanagementsListController",ClientmanagementsListController),ClientmanagementsListController.$inject=["ClientmanagementsService"]}(),function(){function ClientmanagementsService($resource){return $resource("api/clientmanagements/:clientmanagementId",{clientmanagementId:"@_id"},{update:{method:"PUT"}})}angular.module("clientmanagements").factory("ClientmanagementsService",ClientmanagementsService),ClientmanagementsService.$inject=["$resource"]}(),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("mainmenu",{url:"/mainmenu",templateUrl:"modules/core/client/views/mainmenu.client.view.html",data:{roles:["user"]}}).state("mainmenuadmin",{url:"/mainmenuadmin",templateUrl:"modules/core/client/views/mainmenuadmin.client.view.html",data:{roles:["admin"]}}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.goToMainMenu=function(){"admin"===Authentication.user.roles[0]?$state.go("mainmenuadmin"):$state.go("mainmenu")},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),function(){function routeConfig($stateProvider){$stateProvider.state("inventorymanagements",{"abstract":!0,url:"/inventorymanagements",template:"<ui-view/>",data:{roles:["user","admin"]}}).state("inventorymanagements.list",{url:"",templateUrl:"modules/inventorymanagements/client/views/list-inventorymanagements.client.view.html",controller:"InventorymanagementsListController",controllerAs:"vm",data:{pageTitle:"Inventory List"}}).state("inventorymanagements.receive",{url:"/receive",templateUrl:"modules/inventorymanagements/client/views/receive-inventorymanagement.client.view.html",controller:"InventorymanagementsReceiveController",controllerAs:"vm",data:{pageTitle:"Receive Inventory"}}).state("inventorymanagements.create",{url:"/create",templateUrl:"modules/inventorymanagements/client/views/create-inventorymanagement.client.view.html",controller:"InventorymanagementsController",controllerAs:"vm",params:{upc:null,quantity:null},resolve:{inventorymanagementResolve:newInventorymanagement},data:{pageTitle:"Inventory Create"}}).state("inventorymanagements.edit",{url:"/:inventorymanagementId/edit",templateUrl:"modules/inventorymanagements/client/views/edit-inventorymanagement.client.view.html",controller:"InventorymanagementsController",controllerAs:"vm",resolve:{inventorymanagementResolve:getInventorymanagement},data:{pageTitle:"Edit Inventory {{ inventorymanagementResolve.upc }}"}}).state("inventorymanagements.view",{url:"/:inventorymanagementId",templateUrl:"modules/inventorymanagements/client/views/view-inventorymanagement.client.view.html",controller:"InventorymanagementsController",controllerAs:"vm",resolve:{inventorymanagementResolve:getInventorymanagement},data:{pageTitle:"Inventory {{ inventorymanagementResolve.tags }}"}})}function getInventorymanagement($stateParams,InventorymanagementsService){return InventorymanagementsService.get({inventorymanagementId:$stateParams.inventorymanagementId}).$promise}function newInventorymanagement($stateParams,InventorymanagementsService){return new InventorymanagementsService({upc:$stateParams.upc,qty:$stateParams.quantity})}angular.module("inventorymanagements").config(routeConfig),routeConfig.$inject=["$stateProvider"],getInventorymanagement.$inject=["$stateParams","InventorymanagementsService"],newInventorymanagement.$inject=["$stateParams","InventorymanagementsService"]}(),function(){function InventorymanagementsController($scope,$state,$window,Authentication,inventorymanagement){function remove(){$window.confirm("Are you sure you want to delete?")&&vm.inventorymanagement.$remove().then(function(){$state.go("inventorymanagements.list")})}function save(isValid){function successCallback1(res){$state.go("inventorymanagements.view",{inventorymanagementId:res._id})}function successCallback2(res){$state.go("inventorymanagements.list",{inventorymanagementId:res._id})}function errorCallback(res){vm.error=res.data.message}return isValid?void(vm.inventorymanagement._id?vm.inventorymanagement.$update(successCallback1,errorCallback):vm.inventorymanagement.$save(successCallback2,errorCallback)):($scope.$broadcast("show-errors-check-validity","vm.form.inventorymanagementForm"),!1)}function changeStatus(){$window.confirm("Are you sure you want to change this item's activity?")&&(vm.inventorymanagement.inactive=!vm.inventorymanagement.inactive,vm.inventorymanagement.$update(vm.inventorymanagement).then(function(){$state.go("inventorymanagements.view")}))}function labelDisp(){return vm.inventorymanagement.inactive?"label label-warning":""}function labelText(){return vm.inventorymanagement.inactive?"Inactive":""}function buttonColor(){return vm.inventorymanagement.inactive?"btn btn-success":"btn btn-warning"}function buttonText(){return vm.inventorymanagement.inactive?"Activate":"Deactivate"}var vm=this;vm.authentication=Authentication,vm.inventorymanagement=inventorymanagement,vm.error=null,vm.form={},vm.remove=remove,vm.save=save,vm.changeStatus=changeStatus,vm.labelDisp=labelDisp,vm.labelText=labelText,vm.buttonColor=buttonColor,vm.buttonText=buttonText}angular.module("inventorymanagements").controller("InventorymanagementsController",InventorymanagementsController),InventorymanagementsController.$inject=["$scope","$state","$window","Authentication","inventorymanagementResolve"]}(),function(){function InventorymanagementsListController(InventorymanagementsService){var vm=this;vm.inventorymanagements=InventorymanagementsService.query(),vm.headSort="tags",vm.showNoInactive=function(item){return item.inactive===!1}}angular.module("inventorymanagements").controller("InventorymanagementsListController",InventorymanagementsListController),InventorymanagementsListController.$inject=["InventorymanagementsService"]}(),function(){function InventorymanagementsReceiveController(InventorymanagementsService,$scope,$state){function toasty(){var x=document.getElementById("snackbar");x.className="show",setTimeout(function(){x.className=x.className.replace("show","")},3e3)}function isNonzeroInteger(str){if(0!==str&&!str)return!0;var n=Math.floor(Number(str));return String(n)===String(str)&&n>0}var vm=this;$scope.state=$state,vm.inventorymanagements=InventorymanagementsService.query(),$scope.choices=[{id:"choice1",upc:"",quantity:""}],$scope.addNewChoice=function(){var newItemNo=$scope.choices.length+1;$scope.choices.push({id:"choice"+newItemNo,upc:"",quantity:""})},$scope.removeChoice=function(){var lastItem=$scope.choices.length-1;$scope.choices.splice(lastItem)},$scope.receive=function(){function successCallback(res){toasty(),$state.go("inventorymanagements.receive")}function errorCallback(res){vm.error=res.data.message}for(var i=0;i<$scope.choices.length;i++){if($scope.choices[i].invResult=-1,!$scope.choices[i].upc.upc&&!$scope.choices[i].quantity)return void alert("You must fill in Quantity and UPC first");if(!$scope.choices[i].upc.upc)return void alert("You must fill in UPC first");if(!$scope.choices[i].quantity)return void alert("You must fill in Quantity first");if(!isNonzeroInteger($scope.choices[i].quantity))return void alert("Quantity must be a nonzero integer");for(var j=0;j<vm.inventorymanagements.length;j++)if(vm.inventorymanagements[j].upc===$scope.choices[i].upc.upc){$scope.choices[i].invResult=j;break}if(-1===$scope.choices[i].invResult)return void $state.go("inventorymanagements.create",{upc:$scope.choices[i].upc.upc,quantity:$scope.choices[i].quantity})}for(var i2=0;i2<$scope.choices.length;i2++){var quan=parseInt($scope.choices[i2].quantity);$scope.choices[i2].quantity=null,vm.inventorymanagements[$scope.choices[i2].invResult].qty+=quan,vm.inventorymanagements[$scope.choices[i2].invResult].$update(successCallback,errorCallback)}}}angular.module("inventorymanagements").controller("InventorymanagementsReceiveController",InventorymanagementsReceiveController),InventorymanagementsReceiveController.$inject=["InventorymanagementsService","$scope","$state"]}(),function(){function InventorymanagementsService($resource){return $resource("api/inventorymanagements/:inventorymanagementId",{inventorymanagementId:"@_id"},{update:{method:"PUT"}})}angular.module("inventorymanagements").factory("InventorymanagementsService",InventorymanagementsService),InventorymanagementsService.$inject=["$resource"]}(),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("user-create",{url:"/users/create",templateUrl:"modules/users/client/views/admin/create-user.client.view.html",controller:"AuthenticationController"})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signin",{url:"",templateUrl:"modules/core/client/views/home.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:userId",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){$scope.headSort="username",Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=1e3,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve","Users",function($scope,$state,Authentication,userResolve,Users){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.editCheck=function(editName,editID){editName===Authentication.user.username?alert("You cannot edit yourself."):$state.go("admin.user-edit",{userId:editID})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,
$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.signup=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signup",$scope.credentials).success(function(response){$state.go("admin.users")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,"admin"===Authentication.user.roles[0]?$state.go("mainmenuadmin"):$state.go("mainmenu")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/changePassword/"+$stateParams.userId).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]),angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin!==password?!1:!0})})}}}]),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){var result=owaspPasswordStrengthTest.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with at least 10 characters, numbers, lowercase, upppercase, and special characters.";return popoverMsg}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);